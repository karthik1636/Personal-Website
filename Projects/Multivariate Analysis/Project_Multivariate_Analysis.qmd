---
title: "Project"
format: docx
editor: visual
editor_options: 
  chunk_output_type: console
---

## Suicide Rates

We need to decide on grouping variables for carrying out Tests. Let's start by using Sex, AgeGroup, CountryName and Year as the group factors to see if different groups have the same mean vector for the continuous variables (SuicideCount, GDPPerCapita, InflationRate, EmploymentPopulationRatio).

#### Exploring the Data

```{r}
library(readr)
library(dplyr)
library(ggplot2)
library(gridExtra)
library(tidyverse)
library(car)
library(MVN)
library(readr)
data <- read_csv("Suicide_Rates (4).csv", show_col_types = FALSE)
head(data)
```

```{r}
data$Sex <- as.factor(data$Sex)
data$AgeGroup <- as.factor(data$AgeGroup)
data$Year <- as.factor(data$Year)
data$CountryName <- as.factor(data$CountryName)
data$SuicideCount = as.numeric(data$SuicideCount)
data$GDPPerCapita = as.numeric(data$GDPPerCapita)
data$InflationRate = as.numeric(data$InflationRate)
data$EmploymentPopulationRatio = as.numeric(data$EmploymentPopulationRatio)


categorical_vars <- names(data)[sapply(data, is.factor)]
numeric_vars <- names(data)[sapply(data, is.numeric)]

unique_values <- map(data[categorical_vars], unique)
print(unique_values)
```

#### **Test Assumptions for conducting MANOVA**

Assumptions: The variables are from a multivariate normal distribution, with consistent variance and independent samples.

1\. **Normality**: The data in each group should be approximately normally distributed.

2.**Equal Covariance Matrices** (Homogeneity of Covariance): The covariance matrices of the groups should be equal.

3\. **Independence**: Observations should be independent of each other.

#### Verifying if the data is from Multivariate normal distribution

```{r}
# Converting grouping variables to factors
data$Sex <- as.factor(data$Sex)
data$AgeGroup <- as.factor(data$AgeGroup)
data$CountryName <- as.factor(data$CountryName)
data$Year <- as.factor(data$Year)

# Converting continuous variables to numeric, if not already
data$SuicideCount <- as.numeric(data$SuicideCount)
data$GDPPerCapita <- as.numeric(data$GDPPerCapita)
data$InflationRate <- as.numeric(data$InflationRate)
data$EmploymentPopulationRatio <- as.numeric(data$EmploymentPopulationRatio)

# Remove rows with any NA values
data <- na.omit(data)
```

```{r}
library(MVN)
# Example of sampling the data
set.seed(123)  # for reproducibility
sampled_data <- data[sample(nrow(data), 10000), 5:8]  # adjust sample size based on your available memory

# Run mvn on the sampled data
mvn_result <- mvn(data=sampled_data, multivariatePlot = "qq")
print(mvn_result)

```

The results from the multivariate normality tests suggest that the dataset does not follow a multivariate normal distribution:

-   **Multivariate Test (Henze-Zirkler)**: The Henze-Zirkler test yields a very high statistic (64.56467) with a p-value of 0, indicating strong evidence against multivariate normality. The summary explicitly states "NO" for multivariate normality.

-   **Univariate Normality Tests**: Each variable individually also fails to conform to normality as evidenced by the Anderson-Darling tests, which all return significant results (p-values \< 0.001), indicating that none of the variables are normally distributed.

-   **Descriptive Statistics**: The skewness and kurtosis values for the variables further affirm the deviation from normality, as ideally, for normal distribution, skewness should be around 0 and kurtosis around 3.

```{r}
# Check the minimum value in the SuicideCount column
min_suicide_count <- min(data$SuicideCount, na.rm = TRUE)

# Calculate the necessary constant to make all values positive
constant <- if(min_suicide_count <= 0) { abs(min_suicide_count) + 1 } else { 0 }

# Apply the constant to adjust the data
data$adjusted_SuicideCount <- data$SuicideCount + constant

# Now check again to ensure all values are positive
min(data$adjusted_SuicideCount, na.rm = TRUE)
```

```{r}
# Apply the Box-Cox transformation using the MASS package
library(MASS)

# Model fitting with adjusted SuicideCount
bc <- boxcox(lm(adjusted_SuicideCount ~ 1, data = data))

# Find the lambda that maximizes the log-likelihood
optimal_lambda <- bc$x[which.max(bc$y)]
data$bc_SuicideCount <- (data$adjusted_SuicideCount^optimal_lambda - 1) / optimal_lambda

# Check the transformed data
summary(data$bc_SuicideCount)
```

```{r}
hist(data$bc_SuicideCount, main="Box-Cox Transformed Suicide Count", xlab="Transformed Values", breaks=50)
```

Even after the Transformation \[Box-Cox\] the Data does not appear to be Normal.

This can also shown by the Normality Tests and QQ Plots:

#### Anderson-Darling normality test (Size \>5000)

Since Size of the greater than 5000, we need to carry out Anderson-Darling normality test as Shapiro-Wilk test does not work when size\>5000 and we need sampling incase we need to use Shapiro-Wilk test.

```{r}
library(nortest)  # This package includes alternatives like Anderson-Darling

# Applying Anderson-Darling test which is suitable for larger samples
results_ad <- lapply(data[c("SuicideCount", "GDPPerCapita", "InflationRate", "EmploymentPopulationRatio")], ad.test)

print(results_ad)
```

```{r}
# Kolmogorov-Smirnov test as another alternative (Note: This requires empirical distribution comparison)
results_ks <- lapply(data[c("SuicideCount", "GDPPerCapita", "InflationRate", "EmploymentPopulationRatio")], function(x) {
  ks.test(x, "pnorm", mean=mean(x, na.rm=TRUE), sd=sd(x, na.rm=TRUE))
})
print(results_ks)
```

The results from the Anderson-Darling normality tests for the variables indicate that none of the distributions conform to normality, as evidenced by the extremely high test statistics and the very low p-values for all tested variables.

#### QQ PLots

```{r}
par(mfrow = c(2, 2))

# Generating Q-Q plots for each variable
qqnorm(data$SuicideCount); qqline(data$SuicideCount, col = "steelblue", lwd = 2)
qqnorm(data$GDPPerCapita); qqline(data$GDPPerCapita, col = "steelblue", lwd = 2)
qqnorm(data$InflationRate); qqline(data$InflationRate, col = "steelblue", lwd = 2)
qqnorm(data$EmploymentPopulationRatio); qqline(data$EmploymentPopulationRatio, col = "steelblue", lwd = 2)
```

#### Homogenity Of Covariances Test:

```{r}
# Box's M test for homogeneity of covariance matrices
library(car)

library(biotools)
boxM(data[, c("SuicideCount", "GDPPerCapita", "InflationRate", "EmploymentPopulationRatio")], data$Sex)
boxM(data[, c("SuicideCount", "GDPPerCapita", "InflationRate", "EmploymentPopulationRatio")], data$AgeGroup)
boxM(data[, c("SuicideCount", "GDPPerCapita", "InflationRate", "EmploymentPopulationRatio")], data$Year)
```

The results from Box's M-test for Homogeneity of Covariance Matrices indicate significant differences in covariance matrices across different groups.

The test suggests that these differences are statistically significant when grouping by AgeGroup (Chi-Square = 7523.4, df = 50, p-value \< 2.2e-16), by Year (Chi-Square = 9728, df = 310, p-value \< 2.2e-16), and in a more general analysis without specific grouping (Chi-Square = 1344.6, df = 10, p-value \< 2.2e-16).

This implies a lack of homogeneity in variances across the specified groups, suggesting that the data may require different analytical approaches or transformations depending on the subgroup being analyzed.\
\
So we will use Non Parametric Method for Analysis.

#### Non Parametric Method

```{r}
# Non-parametric test for differences based on 'Sex'
kruskal.test(SuicideCount ~ Sex, data = data)
kruskal.test(GDPPerCapita ~ Sex, data = data)
kruskal.test(InflationRate ~ Sex, data = data)
kruskal.test(EmploymentPopulationRatio ~ Sex, data = data)

# Non-parametric test for differences based on 'AgeGroup'
kruskal.test(SuicideCount ~ AgeGroup, data = data)
kruskal.test(GDPPerCapita ~ AgeGroup, data = data)
kruskal.test(InflationRate ~ AgeGroup, data = data)
kruskal.test(EmploymentPopulationRatio ~ AgeGroup, data = data)

# Non-parametric test for differences based on 'CountryName' 
kruskal.test(SuicideCount ~ CountryName, data = data)
kruskal.test(GDPPerCapita ~ CountryName, data = data)
kruskal.test(InflationRate ~ CountryName, data = data)
kruskal.test(EmploymentPopulationRatio ~ CountryName, data = data)

# Non-parametric test for differences based on 'Year'
kruskal.test(SuicideCount ~ Year, data = data)
kruskal.test(GDPPerCapita ~ Year, data = data)
kruskal.test(InflationRate ~ Year, data = data)
kruskal.test(EmploymentPopulationRatio ~ Year, data = data)

```

The Kruskal-Wallis rank sum test was conducted to assess differences in various continuous variables across different groupings. Here's a summary of the results:

1.  **SuicideCount by Sex**:

    -   The Kruskal-Wallis chi-squared statistic is 1099.8 with 1 degree of freedom.

    -   The p-value is \< 2.2e-16, indicating a significant difference in SuicideCount across different sexes.

2.  **GDPPerCapita by Sex**:

    -   The Kruskal-Wallis chi-squared statistic is 41.977 with 1 degree of freedom.

    -   The p-value is 9.237e-11, indicating a significant difference in GDPPerCapita across different sexes.

3.  **InflationRate by Sex**:

    -   The Kruskal-Wallis chi-squared statistic is 0.16646 with 1 degree of freedom.

    -   The p-value is 0.6833, indicating no significant difference in InflationRate across different sexes.

4.  **EmploymentPopulationRatio by Sex**:

    -   The Kruskal-Wallis chi-squared statistic is 10.052 with 1 degree of freedom.

    -   The p-value is 0.001522, indicating a significant difference in EmploymentPopulationRatio across different sexes.

5.  **SuicideCount by AgeGroup**:

    -   The Kruskal-Wallis chi-squared statistic is 8817.3 with 5 degrees of freedom.

    -   The p-value is \< 2.2e-16, indicating a significant difference in SuicideCount across different age groups.

6.  **GDPPerCapita by AgeGroup**:

    -   The Kruskal-Wallis chi-squared statistic is 14.162 with 5 degrees of freedom.

    -   The p-value is 0.01461, indicating a significant difference in GDPPerCapita across different age groups.

7.  **InflationRate by AgeGroup**:

    -   The Kruskal-Wallis chi-squared statistic is 28.366 with 5 degrees of freedom.

    -   The p-value is 3.086e-05, indicating a significant difference in InflationRate across different age groups.

8.  **EmploymentPopulationRatio by AgeGroup**:

    -   The Kruskal-Wallis chi-squared statistic is 18.4 with 5 degrees of freedom.

    -   The p-value is 0.002484, indicating a significant difference in EmploymentPopulationRatio across different age groups.

9.  **SuicideCount by CountryName**:

    -   The Kruskal-Wallis chi-squared statistic is 22030 with 97 degrees of freedom.

    -   The p-value is \< 2.2e-16, indicating a significant difference in SuicideCount across different countries.

10. **GDPPerCapita by CountryName**:

-   The Kruskal-Wallis chi-squared statistic is 43928 with 97 degrees of freedom.

-   The p-value is \< 2.2e-16, indicating a significant difference in GDPPerCapita across different countries.

11.  **InflationRate by CountryName**:

-   The Kruskal-Wallis chi-squared statistic is 18854 with 97 degrees of freedom.

-   The p-value is \< 2.2e-16, indicating a significant difference in InflationRate across different countries.

12. **EmploymentPopulationRatio by CountryName**:

-   The Kruskal-Wallis chi-squared statistic is 44280 with 97 degrees of freedom.

-   The p-value is \< 2.2e-16, indicating a significant difference in EmploymentPopulationRatio across different countries.

13. **SuicideCount by Year:**

-   The Kruskal-Wallis chi-squared statistic is 145.62with 31 degrees of freedom.

-   The p-value is \< 2.2e-16, indicating a significant difference in SuicideCount across different years.

14. **GDPPerCapita by Year:**

-   The Kruskal-Wallis chi-squared statistic is 145.62with 31 degrees of freedom.

-   The p-value is \< 2.2e-16, indicating a significant difference in GDPPerCapita across different years.

15. **InflationRate by Year:**

-   The Kruskal-Wallis chi-squared statistic is 8671.9 with 31 degrees of freedom.

-   The p-value is \< 2.2e-16, indicating a significant difference in InflationRate across different years.

16. **EmploymentPopulationRatio by Year:**

-   The Kruskal-Wallis chi-squared statistic is 364.16 with 31 degrees of freedom.

-   The p-value is \< 2.2e-16, indicating a significant difference in EmploymentPopulationRatio across different years.

These results suggest that there are significant differences in certain variables across different groupings, while for others, the differences are not statistically significant.

***Overall, the results suggest that factors like Sex, Age Group, Country Name, and Year have a significant impact on variables like Suicide Count, GDP Per Capita, and Employment Population Ratio.***

**Time Series Analysis**

```{r}
#| warning: false
library(tidyverse)
library(dplyr)
library(rstatix)
# Read the CSV file
data <- read.csv("age_std_suicide_rates_1990-2022.csv")
```

Let's begin by looking at the patterns present in the global data.

```{r}
# Group by Year and sum the SuicideCount
result <- data %>% group_by(Year) %>% summarize(SuicideCount = sum(SuicideCount))

# Sort the result by Year
df <- result %>% arrange(Year) %>% ungroup()

df <- as.data.frame(df)

df$MovingAverage <- zoo::rollmean(df$SuicideCount, k = 3, fill = NA)
df$ewma <- stats::filter(df$SuicideCount, filter = rep(1/3, 3), sides = 1)

df$forecast_error_MA = df$SuicideCount - df$MovingAverage
df$forecast_error_EWMA = df$SuicideCount - df$ewma

df <- df[-1, ]
df <- df[-nrow(df), ]
MAPE_MA = mean(abs(df$forecast_error_MA) / df$SuicideCount) * 100
df <- df[-1, ]
MAPE_EWMA = mean(abs(df$forecast_error_EWMA) / df$SuicideCount) * 100

ggplot(df, aes(x = Year)) +
  geom_line(aes(y = SuicideCount, color = "Actual")) +
  geom_line(aes(y = ewma, color = "EWMA"), linetype = "dashed") +
  geom_line(aes(y = MovingAverage, color = "Moving Average"), linetype = "dashed") +
  labs(x = "Year", y = "Suicide Count", title = paste("Actual vs MV vs EWMA Suicide Count")) +
  scale_color_manual(values = c("Actual" = "black", "EWMA" = "red", "Moving Average" = "blue")) +
  theme_minimal()+
  annotate("text", x = max(df$Year), y = max(df$SuicideCount), 
           label = paste("MAPE MA:", round(MAPE_MA, 2), "%", "\n",
                         "MAPE EWMA:", round(MAPE_EWMA, 2), "%"),
           hjust = 1, vjust = 1)
```

From the graph we can see there is not a noticeable trend in global suicide rates until 2020, where the number of suicides drops drastically. It is possible there would be a more noticeable seasonal pattern if our data was collected monthly rather than yearly. This may explain why our moving average and exponentially weighted moving average performed so well, as the data have already been smoothed by aggregating by year. Let's find if there is a similar pattern among all countries by analyzing data for the five countries with the highest suicide rates.

```{r}
library(ggplot2)

plot_ma_ewma <- function(data, num) {
  data <- data %>% select(CountryName, Sex, Year, SuicideCount)
  result <- data %>% group_by(CountryName) %>% summarize(SumSuicideCount = sum(SuicideCount))
  result_sorted <- result %>% arrange(desc(SumSuicideCount)) %>% ungroup()
  names <- result_sorted$CountryName
  
  country <- names[num]
  df <- filter(data, CountryName == country) %>%
    group_by(Year) %>%
    summarize(SuicideCount = sum(SuicideCount)) %>%
    mutate(MovingAverage = zoo::rollmean(SuicideCount, k = 3, fill = NA),
           ewma = stats::filter(SuicideCount, filter = rep(1/3, 3), sides = 1),
           forecast_error_MA = SuicideCount - MovingAverage,
           forecast_error_EWMA = SuicideCount - ewma,
           )
  # Exclude first and last rows from MAPE calculations
  df <- df[-1, ]
  df <- df[-nrow(df), ]
  MAPE_MA = mean(abs(df$forecast_error_MA) / df$SuicideCount) * 100
  df <- df[-1, ]
  MAPE_EWMA = mean(abs(df$forecast_error_EWMA) / df$SuicideCount) * 100
  
  ggplot(df, aes(x = Year)) +
    geom_line(aes(y = SuicideCount, color = "Actual")) +
    geom_line(aes(y = ewma, color = "EWMA"), linetype = "dashed") +
    geom_line(aes(y = MovingAverage, color = "Moving Average"), linetype = "dashed") +
    labs(x = "Year", y = "Suicide Count", title = paste("Actual vs MV vs EWMA Suicide Count of", country)) +
    scale_color_manual(values = c("Actual" = "black", "EWMA" = "red", "Moving Average" = "blue")) +
    theme_minimal()+
    annotate("text", x = max(df$Year), y = max(df$SuicideCount), 
             label = paste("MAPE MA:", round(MAPE_MA, 2), "%", "\n",
                           "MAPE EWMA:", round(MAPE_EWMA, 2), "%"),
             hjust = 1, vjust = 1)
}
```

The above code uses the original data frame and creates subsets of data for each country and then groups the countries data by year, and sort the subsets by suicide count by each country in decreasing order.

```{r}
rank_of_country=1
plot_ma_ewma(data, rank_of_country)
```

Russia has the highest suicide rate of the countries in our data set, but since 2000 suicide rates have been steadily decreasing. Moving average still tracks the data well, but EWMA has dropped noticeably.

```{r}
rank_of_country=2
plot_ma_ewma(data, rank_of_country)
```

The United States has the second highest suicide rate and unfortunately has the opposite trend that Russia has. Suicide rates have been rapidly increasing since 2000. Both moving average and EWMA perform better on this data than on the global set.

```{r}
rank_of_country=3
plot_ma_ewma(data, rank_of_country)
```

Japan has an interesting pattern, a steep increase in 1995 followed by a noisy but consistent rate until 2010 where it experienced a steep decrease in suicides. MA and EWMA both track the pattern well and perform similarly to the global data.

```{r}
rank_of_country=4
plot_ma_ewma(data, rank_of_country)
```

Germany has a noisy but generally downward trend, with an uptick between 2010 and 2015. MA and EWMA both perform well despite the noise.

```{r}
rank_of_country=5
plot_ma_ewma(data, rank_of_country)
```

Korea displays a very noisy pattern. There is a general upward trend that tends to spike up or down randomly. This leads to MA and EWMA performing significantly worse on this data set than on the global data.

In conclusion, using moving averages to forecast suicide rates works well globally and nationally, at least at an annual level.

### Investigating the relationships between suicide rate, generation, and economic conditions.

We will begin by loading the necessary packages for manipulating the data, then separate data into groups for analysis.

```{r}
df <- read.csv('suicide_rates_1990-2022.csv')
df_distinct <- df %>% 
  distinct()
df_distinct <- drop_na(df_distinct)

df_econ <- df_distinct %>%
  group_by(CountryName, Year) %>% 
  summarise(suicides = sum(SuicideCount),
            GDP = mean(GDP))

df_gen <- df_distinct %>% 
  group_by(Year, Generation) %>% 
  summarise(suicides = sum(SuicideCount))
```

Our first data frame will be used to calculate the economic status of each country in each year. The technical definition of a recession is two quarters of a decrease in GDP, however; our data is not that precise. An overall decrease in GDP for a year clearly indicates recession, but there will be some years which had a recession during part of the year but overall have positive GDP growth. This will cause our model to only detect the most severe economic conditions, but if there's no clear relationship between severe economic down turns and suicide rates then there is unlikely to be a relationship between moderate economic down turns and suicide rates.

```{r}
#| warning: false
library(ICSNP)
df_econ <- df_econ %>%
  mutate(diff_gdp <- GDP - lag(GDP))
df_econ$recession <- ifelse(df_econ$`diff_gdp <- GDP - lag(GDP)`<=0,'recession', 'normal')
head(select(df_econ,CountryName,Year,recession))
```

We have created a dataframe which determines if a given country experienced a recession in a give year. We can see the first 10 years of our data for Albania. Notice the first row is labeled NA since we do not have a year in the dataset to compare 1992 to for Albania

```{r}
df_sample <- select(df_econ, CountryName,Year,recession)
df_sample[sample(nrow(df_sample),10),]
```

Here is a sample of the data set showing the same information for different countries. Next let's divide our data set in two, one for recessions and one for periods of normal economic activity. This will allow us to test if there is a difference in the mean vector of suicide rates for the two groups.

```{r}
df_econ_recession <- subset(df_econ,recession == 'recession')
nrow(df_econ_recession)
df_econ_normal <- subset(df_econ,recession != 'recession')
nrow(df_econ_normal)
```

We can see that we have far more samples of countries in normal economic conditions, but still enough recession responses to test our data. Let's use a t test for independent samples to see if there's a difference in mean suicide rates.

```{r}
t.test(df_econ_normal$suicides,df_econ_recession$suicides)
```

We find that there is not enough evidence to suggest a difference in suicide rates at a 5% significance level, but the p-value is still relatively low. There may be other variables influencing this score. Let's continue our investigation by looking at the anova table.

```{r}
econ.lm <- lm(suicides~.-CountryName-`diff_gdp <- GDP - lag(GDP)`,df_econ)
summary(econ.lm)
```

According to the anova table the recession variable is now significant at a 5% level. We can see that once we accounted for overall GDP (an indication of the overall wealth of a country) that changes in condition had a clearer impact. Interestingly GDP had a positive impact on suicide rates, indicating that mo money does mean mo problems. Year had a significant negative impact on overall suicide rates, this reflects the decreasing global trend in suicide rate. Our adjusted R\^2 is approximately 51%, this indicates these variables explain 51% of variation in suicide rate which is a strong effect.

Let's find out if different age groups commit suicide at different rates. We begin with a pairwise t-test with p-values adjusted by the bonferonni method. This will tell us if the mean suicide rate for each generation differ significantly when compared to each other generation. We will not be using pooled variance because we have an equal number of samples for each generation and we do not assume they have equal variance.

```{r}
#| warning: false
pairwise.t.test(x = df_gen$suicides,g = df_gen$Generation, p.adjust.method = 'bonf',pool.sd = FALSE)
```

The pairwise t test tells us that there is a significant difference in the mean vector for each pair of generations. Let's look at the ANOVA and confidence intervals to see which generations have the highest suicide rate.

```{r}
gen.lm <- lm(suicides~., data = df_gen)
summary(gen.lm)
confint(gen.lm, level = 1-.05/5)
```

Our model considers Baby Boomers to be the base case, so each value indicates a suicide rate relative to Baby Boomer suicide rates. From the ANOVA table we can see the effect of belonging to each generation has a significant effect, which lets us be confident in our confidence interval estimates. From the bonferroni adjusted confidence intervals we can gauge the magnitude effect. We can see that Generation Alpha has a the lowest suicide rate compared to baby boomers, we would hope this is the case since they are the youngest generation. The only generation which has a higher suicide rate is generation X. We can see that the rates change among generation and that this explains a 85% of variation in suicide rate, but we can't explain why. Let's investigate the combined effect of generation and economic condition to see if certain generations are impacted by economic conditions more heavily than others.

```{r}
df_com <- merge(df_distinct,df_econ)
df_ar <- drop_na(df_com) %>% 
  group_by(Year, Generation,recession) %>% 
  summarise(suicides = sum(SuicideCount))
ar.lm <- lm(suicides~.+Generation*recession,data = df_ar)
summary(ar.lm)
```

The results are surprising. Our assumption was that Millenials, Gen X, Baby Boomers, and the Silent Generation would have strong positive responses to recession, but Gen X had a negative response, Millenials had an insignificant response, and Gen Alpha had the most significant and highest positive response. The Silent Generation is the only one which matched our assumptions. Let's look at the confidence intervals to get an idea of the magnitude of the effects.

```{r}
confint(ar.lm, level = 1-(.05/11))
```

Implementing the bonferonni p value adjustment we can see our interaction effect may not be significant for most generations, but it is still strongly significant for generation alpha. This suggests that generation alpha is more strongly affected by changes in economic conditions than one may assume.

In conclusion we saw a significant effect on the mean value of suicide rates from both economic conditions and generation. There was also a significant difference between the effect of economic conditions on the mean suicide rates for generation alpha.

### Does Simpson's Paradox occur? If so, for which variables and how?

`{library(readr)} df = df <- read.csv('suicide_rates_1990-2022.csv')`

Simpson's Paradox Function for the following confounding variables:

1.  Sex

```{r}
df$Sex = as.factor(df$Sex)
df$AgeGroup = as.factor(df$AgeGroup)
df$CountryName = as.factor(df$CountryName)


simpsons_paradox = function(var1, var2, df) {
  df_new = df
  df_new[is.na(df_new) | df_new == "Inf"] = NA
  
  if (class(var1) == "numeric"){
    summary1 = summary(glm(var1 ~ var2, data=df_new))
    summary2 = summary(glm(var1 ~ var2 + Sex, data=df_new))
    
    if (summary1$coefficients[2, "Estimate"] > 0 & summary2$coefficients[2, "Estimate"] < 0) {
      return(TRUE)  # Simpson's Paradox exists
    } else if (summary1$coefficients[2, "Estimate"] < 0 & summary2$coefficients[2, "Estimate"] > 0) {
      return(TRUE)  # Simpson's Paradox exists
    } else {
      return(FALSE) # No Simpson's Paradox
    }
  }
  else {return(FALSE)}
}

variables = c("Year", "SuicideCount", "GDPPerCapita", "InflationRate", "EmploymentPopulationRatio", "CountryName", "Sex", "AgeGroup")

# Iterating through each pair of variables
cat("SEX:\n")
for (i in 1:(length(variables)-1)) {
  for (j in (i+1):length(variables)) {
    paradox = simpsons_paradox(df[[variables[i]]], df[[variables[j]]], df)
    
    if (paradox) {
      cat("Simpson's Paradox exists between", variables[i], "and", variables[j], "\n")
    } else {
      cat("No Simpson's Paradox between", variables[i], "and", variables[j], "\n")
    }
  }
}
```

2.  Age Group

```{r}
simpsons_paradox = function(var1, var2, df) {
  df_new = df
  df_new[is.na(df_new) | df_new == "Inf"] = NA
  
  if (class(var1) == "numeric"){
    summary1 = summary(glm(var1 ~ var2, data=df_new))
    summary2 = summary(glm(var1 ~ var2 + AgeGroup, data=df_new))
    
    if (summary1$coefficients[2, "Estimate"] > 0 & summary2$coefficients[2, "Estimate"] < 0) {
      return(TRUE)  # Simpson's Paradox exists
    } else if (summary1$coefficients[2, "Estimate"] < 0 & summary2$coefficients[2, "Estimate"] > 0) {
      return(TRUE)  # Simpson's Paradox exists
    } else {
      return(FALSE) # No Simpson's Paradox
    }
  }
  else {return(FALSE)}
}

# Iterating through each pair of variables
cat("AgeGroup:\n")
for (i in 1:(length(variables)-1)) {
  for (j in (i+1):length(variables)) {
    paradox = simpsons_paradox(df[[variables[i]]], df[[variables[j]]], df)
    
    if (paradox) {
      cat("Simpson's Paradox exists between", variables[i], "and", variables[j], "\n")
    } else {
      cat("No Simpson's Paradox between", variables[i], "and", variables[j], "\n")
    }
  }
}
```

3.  Country Name

```{r}
simpsons_paradox = function(var1, var2, df) {
  df_new = df
  df_new[is.na(df_new) | df_new == "Inf"] = NA
  
  if (class(var1) == "numeric"){
    summary1 = summary(glm(var1 ~ var2, data=df_new))
    summary2 = summary(glm(var1 ~ var2 + CountryName, data=df_new))
    
    if (summary1$coefficients[2, "Estimate"] > 0 & summary2$coefficients[2, "Estimate"] < 0) {
      return(TRUE)  # Simpson's Paradox exists
    } else if (summary1$coefficients[2, "Estimate"] < 0 & summary2$coefficients[2, "Estimate"] > 0) {
      return(TRUE)  # Simpson's Paradox exists
    } else {
      return(FALSE) # No Simpson's Paradox
    }
  }
  else {return(FALSE)}
}

# Iterating through each pair of variables
cat("CountryName:\n")
for (i in 1:(length(variables)-1)) {
  for (j in (i+1):length(variables)) {
    paradox = simpsons_paradox(df[[variables[i]]], df[[variables[j]]], df)
    
    if (paradox) {
      cat("Simpson's Paradox exists between", variables[i], "and", variables[j], "\n")
    } else {
      cat("No Simpson's Paradox between", variables[i], "and", variables[j], "\n")
    }
  }
}
```

We see Simpson's paradox in the following variables when CountryName is the confounding variable causing the paradox :

Year and AgeGroup

SuicideCount and GDPPerCapita

EmploymentPopulationRatio and AgeGroup

### If not normally distributed, where are the distributions centered?

```{r}
library(ggplot2)

# SuicideCount :

ggplot(df, aes(x = SuicideCount)) +
  geom_histogram(aes(y = ..density..), bins = 30, fill = "lightblue", color = "black", alpha = 0.6) +
  geom_density(color = "red", size = 1.2) +
  labs(title = "Distribution of Suicide Count",
       x = "SuicideCount",
       y = "Density") +
  theme_minimal()

mean(df$SuicideCount)
median(df$SuicideCount)
```

We see the Suicide Count variable does not follow Normal Distribution but follows an Exponential distribution with mean = 22.63627 and median = 10

GDPPerCapita :

```{r}
ggplot(df, aes(x = GDPPerCapita)) +
  geom_histogram(aes(y = ..density..), bins = 30, fill = "lightblue", color = "black", alpha = 0.6) +
  geom_density(color = "red", size = 1.2) +
  labs(title = "Distribution of GDP Per Capita",
       x = "SuicideCount",
       y = "Density") +
  theme_minimal()

mean(df$GDPPerCapita)
median(df$GDPPerCapita)
```

We see the Suicide Count variable does not follow Normal Distribution but follows a non-symmetric right-skewed distribution mean = 17045.04 and median = 11452.78

InflationRate :

```{r}
ggplot(df, aes(x = InflationRate)) +
  geom_histogram(aes(y = ..density..), bins = 30, fill = "lightblue", color = "black", alpha = 0.6) +
  geom_density(color = "red", size = 1.2) +
  labs(title = "Distribution of Inflation Rate",
       x = "SuicideCount",
       y = "Density") +
  theme_minimal()

mean(df$InflationRate)
median(df$InflationRate)
```

Again, we see the Inflation Rate variable does not follow Normal Distribution but follows a non-symmetric right-skewed distribution mean = 3.825735 and median = 2.932363

EmploymentPopulationRatio :

```{r}
ggplot(df, aes(x = EmploymentPopulationRatio)) +
  geom_histogram(aes(y = ..density..), bins = 30, fill = "lightblue", color = "black", alpha = 0.6) +
  geom_density(color = "red", size = 1.2) +
  labs(title = "Distribution of Employment Population Ratio",
       x = "SuicideCount",
       y = "Density") +
  theme_minimal()

mean(df$EmploymentPopulationRatio)
median(df$EmploymentPopulationRatio)
```

We see the Suicide Count variable appears to follow a Normal Distribution with mean = 55.80597 and median = 56.261
